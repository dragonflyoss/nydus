name: Smoke Test

on:
  push:
    branches: ["*", "**"]
    paths-ignore: [ '**.md', '**.png', '**.jpg', '**.svg', '**/docs/**' ]
  pull_request_target:
    branches: ["*", "**"]
    paths-ignore: [ '**.md', '**.png', '**.jpg', '**.svg', '**/docs/**' ]
  schedule:
    # Run daily sanity check at 03:00 clock UTC
    - cron: "0 03 * * *"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  SNAPSHOOTER_VERSION: 0.7.3
  NERDCTL_VERSION: 1.3.0
  CNI_PLUGINS_VERSION: 1.2.0
  IMAGE: wordpress

jobs:
  contrib-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Golang
      uses: actions/setup-go@v3
      with:
        go-version: ~1.18
    - name: Golang Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-golang-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-golang-
    - name: Build Contrib
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sudo sh -s -- -b /usr/bin v1.51.2
        make -e DOCKER=false nydusify-release
        make -e DOCKER=false contrib-test
    - name: Upload Nydusify
      uses: actions/upload-artifact@master
      with:
        name: nydusify-artifact
        path: contrib/nydusify/cmd

  nydus-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Rust Cache
      uses: Swatinem/rust-cache@v2.2.0
      with:
        cache-on-failure: true
    - name: Build Nydus
      run: |
        rustup component add rustfmt clippy
        make
    - name: Upload Nydus Binaries
      uses: actions/upload-artifact@master
      with:
        name: nydus-artifact
        path: |
          target/release/nydus-image
          target/release/nydusd

  nydus-integration-test:
    runs-on: ubuntu-latest
    needs: [contrib-build, nydus-build]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Docker Cache
      uses: jpribyl/action-docker-layer-caching@v0.1.0
      continue-on-error: true
    - name: Download Nydus
      uses: actions/download-artifact@master
      with:
        name: nydus-artifact
        path: |
          target/release
    - name: Download Nydusify
      uses: actions/download-artifact@master
      with:
        name: nydusify-artifact
        path: contrib/nydusify/cmd
    - name: Prepare Older Binaries
      id: prepare-binaries
      run: |
        versions=(v0.1.0 v2.1.4)
        version_archs=(v0.1.0-x86_64 v2.1.4-linux-amd64)
        for i in ${!versions[@]}; do
          version=${versions[$i]}
          version_arch=${version_archs[$i]}

          wget -q https://github.com/dragonflyoss/image-service/releases/download/$version/nydus-static-$version_arch.tgz
          sudo mkdir nydus-$version /usr/bin/nydus-$version
          sudo tar xzf nydus-static-$version_arch.tgz -C nydus-$version
          sudo cp -r nydus-$version/nydus-static/* /usr/bin/nydus-$version/
        done
    - name: Golang Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-golang-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-golang-
    - name: Integration Test
      run: |
        sudo mkdir -p /usr/bin/nydus-latest /home/runner/work/workdir
        sudo install -D -m 755 contrib/nydusify/cmd/nydusify /usr/bin/nydus-latest
        sudo install -D -m 755 target/release/nydusd target/release/nydus-image /usr/bin/nydus-latest

        versions=(v0.1.0 v2.1.4 latest)
        version_exports=(v0_1_0 v2_1_4 latest)
        for i in ${!version_exports[@]}; do
          version=${versions[$i]}
          version_export=${version_exports[$i]}
          export NYDUS_BUILDER_$version_export=/usr/bin/nydus-$version/nydus-image
          export NYDUS_NYDUSD_$version_export=/usr/bin/nydus-$version/nydusd
          export NYDUS_NYDUSIFY_$version_export=/usr/bin/nydus-$version/nydusify
        done

        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sudo sh -s -- -b /usr/bin v1.51.2
        sudo -E make smoke-only

  benchmark-oci:
    runs-on: ubuntu-latest
    needs: [contrib-build, nydus-build]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Download Nydus
      uses: actions/download-artifact@master
      with:
        name: nydus-artifact
        path: target/release
    - name: Download Nydusify
      uses: actions/download-artifact@master
      with:
        name: nydusify-artifact
        path: contrib/nydusify/cmd
    - name: Prepare Nerdctl Environment
      run: |
        sudo install -D -m 755 contrib/nydusify/cmd/nydusify /usr/local/bin
        sudo install -D -m 755 target/release/nydusd target/release/nydus-image /usr/local/bin
        sudo wget https://github.com/containerd/nerdctl/releases/download/v${{env.NERDCTL_VERSION}}/nerdctl-${{env.NERDCTL_VERSION}}-linux-amd64.tar.gz
        sudo tar -xzvf nerdctl-${{env.NERDCTL_VERSION}}-linux-amd64.tar.gz -C /usr/local/bin
        sudo mkdir -p /opt/cni/bin
        sudo wget https://github.com/containernetworking/plugins/releases/download/v${{env.CNI_PLUGINS_VERSION}}/cni-plugins-linux-amd64-v${{env.CNI_PLUGINS_VERSION}}.tgz 
        sudo tar -xzvf cni-plugins-linux-amd64-v${{env.CNI_PLUGINS_VERSION}}.tgz -C /opt/cni/bin
        sudo install -D misc/benchmark/cni_bridge.conf /etc/cni/net.d/bridge.conf
    - name: Prepare OCI Registry Environment
      run: |
        sudo docker run -d --restart=always -p 5000:5000 --name registry registry
        sudo docker pull ${{env.IMAGE}} && docker tag ${{env.IMAGE}}:latest localhost:5000/${{env.IMAGE}}:latest
        sudo docker push localhost:5000/${{env.IMAGE}}:latest
        git clone https://github.com/magnific0/wondershaper.git
        sudo install -D -m 755 wondershaper/wondershaper /usr/local/bin
    - name: BenchMark Test
      run: |
        cd misc/benchmark
        sudo python3 benchmark.py --mode oci
    - name: Save Test Result
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-oci
        path: misc/benchmark/${{env.IMAGE}}.csv

  benchmark-nydus-no-prefetch:
    runs-on: ubuntu-latest
    needs: [contrib-build, nydus-build]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Download Nydus
      uses: actions/download-artifact@master
      with:
        name: nydus-artifact
        path: target/release
    - name: Download Nydusify
      uses: actions/download-artifact@master
      with:
        name: nydusify-artifact
        path: contrib/nydusify/cmd
    - name: Prepare Nydus Environment
      run: |
        sudo install -D -m 755 contrib/nydusify/cmd/nydusify /usr/local/bin
        sudo install -D -m 755 target/release/nydusd target/release/nydus-image /usr/local/bin
        wget https://github.com/containerd/nydus-snapshotter/releases/download/v${{env.SNAPSHOOTER_VERSION}}/nydus-snapshotter-v${{env.SNAPSHOOTER_VERSION}}-x86_64.tgz
        tar zxvf nydus-snapshotter-v${{env.SNAPSHOOTER_VERSION}}-x86_64.tgz
        sudo install -D -m 755 nydus-snapshotter/containerd-nydus-grpc /usr/local/bin/
        sudo wget https://github.com/containerd/nerdctl/releases/download/v${{env.NERDCTL_VERSION}}/nerdctl-${{env.NERDCTL_VERSION}}-linux-amd64.tar.gz
        sudo tar -xzvf nerdctl-${{env.NERDCTL_VERSION}}-linux-amd64.tar.gz -C /usr/local/bin
        sudo mkdir -p /opt/cni/bin
        sudo wget https://github.com/containernetworking/plugins/releases/download/v${{env.CNI_PLUGINS_VERSION}}/cni-plugins-linux-amd64-v${{env.CNI_PLUGINS_VERSION}}.tgz 
        sudo tar -xzvf cni-plugins-linux-amd64-v${{env.CNI_PLUGINS_VERSION}}.tgz -C /opt/cni/bin
        sudo install -D misc/benchmark/cni_bridge.conf /etc/cni/net.d/bridge.conf
        sudo install -D misc/benchmark/nydusd_config.json /etc/nydus/config.json
        sudo install -D misc/benchmark/containerd_config.toml /etc/containerd/config.toml
        sudo systemctl restart containerd
        sudo install -D misc/benchmark/nydus-snapshotter.service /etc/systemd/system/nydus-snapshotter.service
        sudo systemctl start nydus-snapshotter
    - name: Prepare Nydus Registry Environment
      run: |
        sudo docker run -d --restart=always -p 5000:5000 --name registry registry
        sudo DOCKER_CONFIG=$HOME/.docker nydusify convert \
          --source ${{env.IMAGE}}:latest \
          --target localhost:5000/${{env.IMAGE}}:latest_nydus \
          --fs-version 6 \
          --platform linux/amd64,linux/arm64
        git clone https://github.com/magnific0/wondershaper.git
        sudo install -D -m 755 wondershaper/wondershaper /usr/local/bin
    - name: BenchMark Test
      run: |
        cd misc/benchmark
        sudo python3 benchmark.py --mode nydus-no-prefetch
    - name: Save Test Result
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-nydus-no-prefetch
        path: misc/benchmark/${{env.IMAGE}}.csv

  benchmark-nydus-all-prefetch:
    runs-on: ubuntu-latest
    needs: [contrib-build, nydus-build]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Download Nydus
      uses: actions/download-artifact@master
      with:
        name: nydus-artifact
        path: target/release
    - name: Download Nydusify
      uses: actions/download-artifact@master
      with:
        name: nydusify-artifact
        path: contrib/nydusify/cmd
    - name: Prepare Nydus Environment
      run: |
        sudo install -D -m 755 contrib/nydusify/cmd/nydusify /usr/local/bin
        sudo install -D -m 755 target/release/nydusd target/release/nydus-image /usr/local/bin
        wget https://github.com/containerd/nydus-snapshotter/releases/download/v${{env.SNAPSHOOTER_VERSION}}/nydus-snapshotter-v${{env.SNAPSHOOTER_VERSION}}-x86_64.tgz
        tar zxvf nydus-snapshotter-v${{env.SNAPSHOOTER_VERSION}}-x86_64.tgz
        sudo install -D -m 755 nydus-snapshotter/containerd-nydus-grpc /usr/local/bin/
        sudo wget https://github.com/containerd/nerdctl/releases/download/v${{env.NERDCTL_VERSION}}/nerdctl-${{env.NERDCTL_VERSION}}-linux-amd64.tar.gz
        sudo tar -xzvf nerdctl-${{env.NERDCTL_VERSION}}-linux-amd64.tar.gz -C /usr/local/bin
        sudo mkdir -p /opt/cni/bin
        sudo wget https://github.com/containernetworking/plugins/releases/download/v${{env.CNI_PLUGINS_VERSION}}/cni-plugins-linux-amd64-v${{env.CNI_PLUGINS_VERSION}}.tgz 
        sudo tar -xzvf cni-plugins-linux-amd64-v${{env.CNI_PLUGINS_VERSION}}.tgz -C /opt/cni/bin
        sudo install -D misc/benchmark/cni_bridge.conf /etc/cni/net.d/bridge.conf
        sudo install -D misc/benchmark/nydusd_config.json /etc/nydus/config.json
        sudo install -D misc/benchmark/containerd_config.toml /etc/containerd/config.toml
        sudo systemctl restart containerd
        sudo install -D misc/benchmark/nydus-snapshotter.service /etc/systemd/system/nydus-snapshotter.service
        sudo systemctl start nydus-snapshotter
    - name: Prepare Nydus Registry Environment
      run: |
        sudo docker run -d --restart=always -p 5000:5000 --name registry registry
        sudo DOCKER_CONFIG=$HOME/.docker nydusify convert \
          --source ${{env.IMAGE}}:latest \
          --target localhost:5000/${{env.IMAGE}}:latest_nydus \
          --fs-version 6 \
          --platform linux/amd64,linux/arm64
        git clone https://github.com/magnific0/wondershaper.git
        sudo install -D -m 755 wondershaper/wondershaper /usr/local/bin
    - name: BenchMark Test
      run: |
        cd misc/benchmark
        sudo python3 benchmark.py --mode nydus-all-prefetch
    - name: Save Test Result
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-nydus-all-prefetch
        path: misc/benchmark/${{env.IMAGE}}.csv

  benchmark-zran-all-prefetch:
    runs-on: ubuntu-latest
    needs: [contrib-build, nydus-build]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Download Nydus
      uses: actions/download-artifact@master
      with:
        name: nydus-artifact
        path: target/release
    - name: Download Nydusify
      uses: actions/download-artifact@master
      with:
        name: nydusify-artifact
        path: contrib/nydusify/cmd
    - name: Prepare Nydus Environment
      run: |
        sudo install -D -m 755 contrib/nydusify/cmd/nydusify /usr/local/bin
        sudo install -D -m 755 target/release/nydusd target/release/nydus-image /usr/local/bin
        wget https://github.com/containerd/nydus-snapshotter/releases/download/v${{env.SNAPSHOOTER_VERSION}}/nydus-snapshotter-v${{env.SNAPSHOOTER_VERSION}}-x86_64.tgz
        tar zxvf nydus-snapshotter-v${{env.SNAPSHOOTER_VERSION}}-x86_64.tgz
        sudo install -D -m 755 nydus-snapshotter/containerd-nydus-grpc /usr/local/bin/
        sudo wget https://github.com/containerd/nerdctl/releases/download/v${{env.NERDCTL_VERSION}}/nerdctl-${{env.NERDCTL_VERSION}}-linux-amd64.tar.gz
        sudo tar -xzvf nerdctl-${{env.NERDCTL_VERSION}}-linux-amd64.tar.gz -C /usr/local/bin
        sudo mkdir -p /opt/cni/bin
        sudo wget https://github.com/containernetworking/plugins/releases/download/v${{env.CNI_PLUGINS_VERSION}}/cni-plugins-linux-amd64-v${{env.CNI_PLUGINS_VERSION}}.tgz 
        sudo tar -xzvf cni-plugins-linux-amd64-v${{env.CNI_PLUGINS_VERSION}}.tgz -C /opt/cni/bin
        sudo install -D misc/benchmark/cni_bridge.conf /etc/cni/net.d/bridge.conf
        sudo install -D misc/benchmark/nydusd_config.json /etc/nydus/config.json
        sudo install -D misc/benchmark/containerd_config.toml /etc/containerd/config.toml
        sudo systemctl restart containerd
        sudo install -D misc/benchmark/nydus-snapshotter.service /etc/systemd/system/nydus-snapshotter.service
        sudo systemctl start nydus-snapshotter
    - name: Prepare Nydus Registry Environment
      run: |
        sudo docker run -d --restart=always -p 5000:5000 --name registry registry
        sudo docker pull ${{env.IMAGE}} && docker tag ${{env.IMAGE}}:latest localhost:5000/${{env.IMAGE}}:latest
        sudo docker push localhost:5000/${{env.IMAGE}}:latest
        sudo DOCKER_CONFIG=$HOME/.docker nydusify convert \
          --source localhost:5000/${{env.IMAGE}}:latest \
          --target localhost:5000/${{env.IMAGE}}:latest_nydus \
          --fs-version 6 \
          --oci-ref \
          --platform linux/amd64,linux/arm64
        git clone https://github.com/magnific0/wondershaper.git
        sudo install -D -m 755 wondershaper/wondershaper /usr/local/bin
    - name: BenchMark Test
      run: |
        cd misc/benchmark
        sudo python3 benchmark.py --mode nydus-all-prefetch
    - name: Save Test Result
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-zran-all-prefetch
        path: misc/benchmark/${{env.IMAGE}}.csv

  benchmark-nydus-filelist-prefetch:
    runs-on: ubuntu-latest
    needs: [contrib-build, nydus-build]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Download Nydus
      uses: actions/download-artifact@master
      with:
        name: nydus-artifact
        path: target/release
    - name: Download Nydusify
      uses: actions/download-artifact@master
      with:
        name: nydusify-artifact
        path: contrib/nydusify/cmd
    - name: Prepare Nydus Environment
      run: |
        sudo install -D -m 755 contrib/nydusify/cmd/nydusify /usr/local/bin
        sudo install -D -m 755 target/release/nydusd target/release/nydus-image /usr/local/bin
        wget https://github.com/containerd/nydus-snapshotter/releases/download/v${{env.SNAPSHOOTER_VERSION}}/nydus-snapshotter-v${{env.SNAPSHOOTER_VERSION}}-x86_64.tgz
        tar zxvf nydus-snapshotter-v${{env.SNAPSHOOTER_VERSION}}-x86_64.tgz
        sudo install -D -m 755 nydus-snapshotter/containerd-nydus-grpc /usr/local/bin/
        sudo wget https://github.com/containerd/nerdctl/releases/download/v${{env.NERDCTL_VERSION}}/nerdctl-${{env.NERDCTL_VERSION}}-linux-amd64.tar.gz
        sudo tar -xzvf nerdctl-${{env.NERDCTL_VERSION}}-linux-amd64.tar.gz -C /usr/local/bin
        sudo mkdir -p /opt/cni/bin
        sudo wget https://github.com/containernetworking/plugins/releases/download/v${{env.CNI_PLUGINS_VERSION}}/cni-plugins-linux-amd64-v${{env.CNI_PLUGINS_VERSION}}.tgz 
        sudo tar -xzvf cni-plugins-linux-amd64-v${{env.CNI_PLUGINS_VERSION}}.tgz -C /opt/cni/bin
        sudo install -D misc/benchmark/cni_bridge.conf /etc/cni/net.d/bridge.conf
        sudo install -D misc/benchmark/nydusd_config.json /etc/nydus/config.json
        sudo install -D misc/benchmark/containerd_config.toml /etc/containerd/config.toml
        sudo systemctl restart containerd
        sudo install -D misc/benchmark/nydus-snapshotter.service /etc/systemd/system/nydus-snapshotter.service
        sudo systemctl start nydus-snapshotter
    - name: Prepare Nydus Registry Environment
      run: |
        sudo docker run -d --restart=always -p 5000:5000 --name registry registry
        sudo DOCKER_CONFIG=$HOME/.docker nydusify convert \
          --source ${{env.IMAGE}}:latest \
          --target localhost:5000/${{env.IMAGE}}:latest_nydus \
          --fs-version 6 \
          --platform linux/amd64,linux/arm64
        git clone https://github.com/magnific0/wondershaper.git
        sudo install -D -m 755 wondershaper/wondershaper /usr/local/bin
    - name: BenchMark Test
      run: |
        cd misc/benchmark
        sudo python3 benchmark.py --mode nydus-filelist-prefetch
    - name: Save Test Result
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-nydus-filelist-prefetch
        path: misc/benchmark/${{env.IMAGE}}.csv

  benchmark-result:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target'
    needs: [benchmark-oci, benchmark-zran-all-prefetch, benchmark-nydus-no-prefetch, benchmark-nydus-all-prefetch, benchmark-nydus-filelist-prefetch]
    steps:
      - name: Download benchmark-oci
        uses: actions/download-artifact@master
        with:
          name: benchmark-oci
          path: benchmark-oci
      - name: Download benchmark-zran-all-prefetch
        uses: actions/download-artifact@master
        with:
          name: benchmark-zran-all-prefetch
          path: benchmark-zran-all-prefetch
      - name: Download benchmark-nydus-no-prefetch
        uses: actions/download-artifact@master
        with:
          name: benchmark-nydus-no-prefetch
          path: benchmark-nydus-no-prefetch
      - name: Download benchmark-nydus-all-prefetch
        uses: actions/download-artifact@master
        with:
          name: benchmark-nydus-all-prefetch
          path: benchmark-nydus-all-prefetch
      - name: Download benchmark-nydus-filelist-prefetch
        uses: actions/download-artifact@master
        with:
          name: benchmark-nydus-filelist-prefetch
          path: benchmark-nydus-filelist-prefetch
      - name: Save Result
        run: |
          sudo install -m 755 benchmark-oci/wordpress.csv oci.csv
          sudo install -m 755 benchmark-zran-all-prefetch/wordpress.csv zran-all-prefetch.csv
          sudo install -m 755 benchmark-nydus-no-prefetch/wordpress.csv nydus-no-prefetch.csv
          sudo install -m 755 benchmark-nydus-all-prefetch/wordpress.csv nydus-all-prefetch.csv
          sudo install -m 755 benchmark-nydus-filelist-prefetch/wordpress.csv nydus-filelist-prefetch.csv

          echo "| benchmark-result | pull-elapsed(s) | create-elapsed(s) | run-elapsed(s) | total-elapsed(s) |" > result.md
          echo "|:-------|:-----------------:|:-------------------:|:----------------:|:------------------:|" >> result.md
          
          for file in *.csv; do
            if ! [ -f "$file" ]; then
              continue
            fi
            filename=$(basename "$file" .csv)
            tail -n +2 "$file" | while read line; do
              pull=$(echo "$line" | cut -d ',' -f 2)
              create=$(echo "$line" | cut -d ',' -f 3)
              run=$(echo "$line" | cut -d ',' -f 4)
              total=$(echo "$line" | cut -d ',' -f 5)
              printf "| %s | %s | %s | %s | %s |\n" "$filename" "$pull" "$create" "$run" "$total"
            done >> result.md
          done
      - name: Comment
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const markdownFilePath = './result.md';
            const markdownContent = fs.readFileSync(markdownFilePath, 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: markdownContent
            })

  nydus-unit-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Rust Cache
      uses: Swatinem/rust-cache@v2.2.0
      with:
        cache-on-failure: true
    - name: Unit Test
      run: |
        make ut

  nydus-unit-test-coverage:
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v3
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.0
        with:
          cache-on-failure: true
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate code coverage
        run: make coverage-codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: codecov.json
          fail_ci_if_error: true

  nydus-cargo-deny:
    name: cargo-deny
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - uses: EmbarkStudios/cargo-deny-action@v1
