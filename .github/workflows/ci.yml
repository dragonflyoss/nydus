name: CI

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]
  schedule:
    # Run daily sanity check at 23:08 clock UTC
    - cron: "8 23 * * *"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  ORGANIZATION: ${{ github.repository }}
  IMAGE_LIST_PATH: misc/top_images/error_prone_images.txt
  FSCK_PATCH_PATH: misc/top_images/fsck.patch

jobs:
  contrib-ut:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.16.x, 1.17.x]
    env:
      DOCKER: false
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: cache go mod
        uses: actions/cache@v2
        with:
          path: /go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/contrib/nydusify/go.sum', '**/contrib/ctr-remote/go.sum', '**/contrib/docker-nydus-graphdriver/go.sum', '**/contrib/nydus-overlayfs/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go
      - name: test contrib UT
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.43.0
          make all-contrib-test

  smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache Nydus
        uses: Swatinem/rust-cache@v1
        with:
          target-dir: |
            ./target-fusedev
            ./target-virtiofs
          cache-on-failure: true
          key: ${{ runner.os }}-cargo-amd64
      - name: Cache Docker Layers
        uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
      - name: Smoke Test
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.43.0
          echo Cargo Home: $CARGO_HOME
          echo Running User: $(whoami)
          make docker-smoke
          sudo chown -R $(id -un):$(id -gn) . ~/.cargo/

  macos-ut:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: build and check
        run: |
          rustup component add rustfmt && rustup component add clippy
          make macos-ut

  deny:
    name: Cargo Deny
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: EmbarkStudios/cargo-deny-action@v1

  convert-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: cache go mod
        uses: actions/cache@v2
        with:
          path: /go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/contrib/nydusify/go.sum', '**/contrib/ctr-remote/go.sum', '**/contrib/docker-nydus-graphdriver/go.sum', '**/contrib/nydus-overlayfs/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go
      - name: Build nydus
        run: |
          rustup component add rustfmt && rustup component add clippy
          make fusedev && make nydusify
          sudo cp target-fusedev/debug/nydus-image contrib/nydusify/cmd/nydusify /usr/local/bin/
      - name: Build fsck.erofs
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential git autotools-dev automake libtool pkg-config uuid-dev liblz4-dev
          git clone https://git.kernel.org/pub/scm/linux/kernel/git/xiang/erofs-utils.git
          cd erofs-utils && git apply ../${{ env.FSCK_PATCH_PATH }} && ./autogen.sh && ./configure && make && cd ..
          sudo cp erofs-utils/fsck/fsck.erofs /usr/local/bin/
      - name: Log in to the container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Convert RAFS v5 images
        run: |
          for I in $(cat ${{ env.IMAGE_LIST_PATH }}); do
            echo "converting $I:nydus-latest-v5"
            sudo DOCKER_CONFIG=$HOME/.docker nydusify convert \
                 --source $I:latest \
                 --target ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/$I:nydus-latest-v5 \
                 --build-cache ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/nydus-build-cache:$I \
                 --fs-version 5
            sudo rm -rf ./tmp
          done
      - name: Convert and check RAFS v6 images
        run: |
          for I in $(cat ${{ env.IMAGE_LIST_PATH }}); do
            echo "converting $I:nydus-latest-v6"
            sudo DOCKER_CONFIG=$HOME/.docker nydusify convert \
                 --source $I:latest \
                 --target ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/$I:nydus-latest-v6 \
                 --build-cache ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/nydus-build-cache:$I \
                 --fs-version 6
            sudo rm -rf ./tmp
            nydusify check \
                --target ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/$I:nydus-latest-v6 2&>1 > /dev/null
            fsck.erofs --extract -d9 output/nydus_bootstrap 
            rm -rf ./output
          done